Assume that we have only one CPU with one core. Only one
process can run simultaneously and no race conditions might
occur. You should use the code templates in this gist. The code
snippets in the previous slides contain only function signatures.
Write a program scheduler.c (scheduler) to simulate the first
come, first served (FCFS) algorithm using a timer. Write another
program worker.c (worker process) which is responsible for
finding and counting the next triangular numbers from the range
(n, âˆž) where n is a big number randomly generated by the
function long big n().
In this simulation, each process has an index (idx), arrival time
(at) and burst time (bt). The scheduler reads the data of all
processes from a file data.txt where it contains (m + 1) rows and 3
columns (idx, at, bt). Here, we can have at most 10 processes
where the actual number of processes is m.
Then, the scheduler runs a timer (struct itimerval) and sends
a signal SIGALRM every second. You need to use a timer and
set it to decrement in real time. You need to write the function
schedule handler which schedules the processes according to the
given algorithm, in this exercise we have FCFS algorithm.
The worker process (worker.c) in the main function will read its
idx as a command line argument. Then it registers the same
handler signal handler for all three signals (SIGTSTP,
SIGCONT, SIGTERM). The worker process generates a number n
using big n function. In an infinite loop, the worker checks the
candiadate for the next triangular number next n using
is triangular, when it finds the triangular number next n, it
needs to increments the counter tris and then checks again for the
next number (next n + 1) till termination by the scheduler.
The function create process, firstly, stops any running workers,
then, forks a new worker process and runs an instance of worker
program worker.c using execvp where the argument
new process is the idx of the new process and passed as a
command line argument to the worker program.
The function find next process, will return the ProcessData of
the next process to run according to the algorithm. In FCFS, you
need to search in the data array for the next process based on
their arrival time. In case, more than one process have the same
arrival time then we can take the process with smallest idx as the
next process to run. In case there are no processes arrived yet,
then you need to find the next process again after incrementing
the total time till finding one process.
The shcheduler terminates when the burst time of all processes
becomes zero and prints a report before termination.
The implementation should calculate the following metrics and
add to the ProcessData of each process: (Note: Go to the last
slides to see the formula of the required metrics)
Response time (RT)
Completion time(CT)
Turn around time(TAT)
Waiting time(WT)
Average Turnaround time
Average waiting time
Based on your implementation, answer the following questions and
add your answers to a file ex2.txt.
Change the macro TRI BASE to a small number like 100 and run
the scheduler again. Compare your results before and after the
change?
Change the arrival time of all processes to make all of them zero,
then run th
Submit worker.c, scheduler.c, ex2.txt with a script ex2.sh to
run the program.
Note: The user runs only the scheduler program passing
data.txt as a command line argument, then the scheduler will run
workers based on the given data. Do not forget to compile the
worker.c before running scheduler.c.
